
总结：这部分是完善用户修改密码的数据库相关逻辑，修改密码需要在修改密码的界面ChangePasswordActivity中实现数据库的操作
1.完善个人中心界面MeActivity，获取当前用户的登录标记
2.完善ChangePasswordActivity，定义里面的修改密码的按钮的点击事件
3.在RealmHelp中创建一个修改密码的方法changePassword()



知识点一：完善个人中心界面MeActivity，获取当前用户的登录标记

第一步：在MeActivity中获取用户的用户标记(用户的手机号)，实例：
public class MeActivity extends BaseActivity {
    private TextView mTvUser;
        initNavBar(true, "个人中心", false);
        mTvUser = fd(R.id.tv_user);
        mTvUser.setText("用户名：" + UserHelper.getInstance().getPhone());}    //拿到用户的登录标记(手机号码)






知识点二：完善ChangePasswordActivity，定义里面的修改密码的按钮的点击事件

第一步：在ChangePasswordActivity中定义用户修改密码的点击事件，实例：
public class ChangePasswordActivity extends BaseActivity {
    public void onChangePasswordClick (View v) {
        String oldPassword = mOldPassword.getInputStr();
        String password = mPassword.getInputStr();
        String passwordConfirm = mPasswordConfirm.getInputStr();
        boolean result = UserUtils.changePassword(this, oldPassword, password, passwordConfirm);    //这里需要在UserUtils中创建修改密码的方法
        if (!result) {
            return;}
        UserUtils.logout(this);}        //退出到登录页面

第二步：在UserUtils中创建修改密码的方法changePassword()，实例：
    public static boolean changePassword(Context context, String oldPassword, String password, String passwordConfirm) {
        //验证原密码是否输入
        if (TextUtils.isEmpty(oldPassword)) {
            Toast.makeText(context, "该输入原密码", Toast.LENGTH_SHORT).show();
            return false;}
        //验证新密码是否输入，新密码与原密码是否相同
        if (TextUtils.isEmpty(password) || !password.equals(passwordConfirm)) {
            Toast.makeText(context, "该确认密码", Toast.LENGTH_SHORT).show();
            return false;}
        //验证原密码是否正确
        RealmHelp realmHelp = new RealmHelp();
        UserModel userModel = realmHelp.getUser();    //这里需要在RealmHelpe中创建一个获取用户Model的方法getUser()
        if (!EncryptUtils.encryptMD5ToString(oldPassword).equals(userModel.getPassword())) {
            Toast.makeText(context, "原密码不正确", Toast.LENGTH_SHORT).show();
            return false;}
        realmHelp.changePassword(EncryptUtils.encryptMD5ToString(password));    //这里需要在RealmHelpe中创建一个修改密码的数据库操作方法
        realmHelp.close(); 
        return true;}

第三步：在RealmHelp中创建一个获取当前用户的方法getUser()，实例：
    //获取当前用户
    public UserModel getUser() {
        RealmQuery<UserModel> query = mRealm.where(UserModel.class);
        UserModel userModel = query.equalTo("phone", UserHelper.getInstance().getPhone()).findFirst();
        return userModel;}

第四步：在RealmHelp中创建一个修改密码的方法changePassword()，实例：
    //修改密码
    public void changePassword (String password) {
        UserModel userModel = getUser();       //直接调用上面的getUser()方法获取当前用户的UserModel
        mRealm.beginTransaction();
        userModel.setPassword(password);       //将新的密码设置到UserModel之中
        mRealm.commitTransaction();}

