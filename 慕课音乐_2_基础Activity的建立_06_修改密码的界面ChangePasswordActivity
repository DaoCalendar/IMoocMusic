
总结：这部分是创建修改密码的界面ChangePasswordActivity
1.完善UserUtils工具类中的退出登录的方法logout()
2.创建修改密码的界面ChangePasswordActivity及其布局文件activity_change_password.xml



知识点一：完善UserUtils工具类中的退出登录的方法logout()

第一步：在UserUtils中的logout()方法中添加Intent的标志符，目的是清空任务栈(Task栈)，
使得退出到LoginActivity之后可以直接退出app，实例：
public class UserUtils {
    public static void logout (Context context) {
        Intent intent = new Intent(context, LoginActivity.class);
        //添加intent标识符，清理Task栈并且新生成一个Task栈，此时Task栈中就只有一个LoginActivity，你再点击后退按钮的话就一定会退出app
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
        //因为之前清理了Task栈，导致Activity跳转的动画发生异常(Activity跳转动画是通过Task栈中Activity的插入和弹出进行的)，所以这里需要重新定义Activity跳转动画
        ((Activity)context).overridePendingTransition(R.anim.open_enter, R.anim.open_exit);}}





知识点二：创建修改密码的界面ChangePasswordActivity及其布局文件activity_change_password.xml

第一步：定义布局文件activity_change_password.xml中的样式

第二步：在ChangePasswordActivity中需要：1.在initView()中初始化NavBar，同时绑定布局文件中的控件，实例：
public class ChangePasswordActivity extends BaseActivity {
    private InputView mOldPassword, mPassword, mPasswordConfirm;
    ...
    private void initView () {
        initNavBar(true, "修改密码", false);
        mOldPassword = fd(R.id.input_old_password);
        mPassword = fd(R.id.input_password);
        mPasswordConfirm = fd(R.id.input_password_confirm);}

第三步：在ChangePasswordActivity中需要：2.定义修改密码的按钮的点击事件，实例：
    public void onChangePasswordClick (View v) {
        //TODO 修改密码的数据库逻辑

